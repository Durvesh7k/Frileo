generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  name       String
  email      String    @unique
  password   String
  role       Role
  bio        String?
  skills     String[]
  profilePic String?
  gigs       Gig[]
  reviews    Review[]
  orders     Order[]   @relation("BuyerOrders")
  sales      Order[]   @relation("SellerOrders")
  messagesSent     Message[] @relation("SentMessages")
  messagesReceived Message[] @relation("ReceivedMessages")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Gig {
  id           String   @id @default(uuid())
  title        String
  description  String
  price        Float
  deliveryTime Int
  category     String
  images       String[]
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  orders       Order[]
  reviews      Review[]
  createdAt    DateTime @default(now())
}

model Order {
  id              String        @id @default(uuid())
  status          OrderStatus   @default(PENDING)
  requirements    String?
  deliveryFiles   String[]
  gigId           String
  gig             Gig           @relation(fields: [gigId], references: [id])
  buyerId         String
  buyer           User          @relation("BuyerOrders", fields: [buyerId], references: [id])
  sellerId        String
  seller          User          @relation("SellerOrders", fields: [sellerId], references: [id])
  payment         Payment?      // no relation args here, Prisma infers it from the other side
  createdAt       DateTime      @default(now())
}

model Payment {
  id             String   @id @default(uuid())
  orderId        String   @unique
  amount         Float
  currency       String   @default("usd")
  status         String   // e.g., "succeeded", "pending", "failed"
  transactionId  String?  // <--- this field stores Stripe's charge ID
  order          Order    @relation(fields: [orderId], references: [id])
  createdAt      DateTime @default(now())
}


model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String
  userId    String
  gigId     String
  user      User     @relation(fields: [userId], references: [id])
  gig       Gig      @relation(fields: [gigId], references: [id])
  createdAt DateTime @default(now())
}

model Message {
  id         String   @id @default(uuid())
  content    String
  senderId   String
  receiverId String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  createdAt  DateTime @default(now())
}

enum Role {
  BUYER
  SELLER
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  DELIVERED
  COMPLETED
  CANCELED
}
